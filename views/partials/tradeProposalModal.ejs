<div id="tradeProposalOverlay"
    style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.4); z-index:1049;">
</div>
<div id="tradeProposalModal" class="modal"
    style="max-width: 900px; min-height: 500px; width: 95vw; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1050;">
    <div class="modal-content" style="padding: 32px 32px 24px 32px;">
        <div class="modal-header"
            style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h4 style="margin: 0;">Propose Trade</h4>
            <a href="#" class="modal-close" style="color: #666;">&times;</a>
        </div>
        <div class="modal-body">
            <form id="tradeProposalForm" action="/trades" method="POST">
                <input type="hidden" name="requestedItem" id="requestedItemId">
                <input type="hidden" name="receiverId" id="receiverId">

                <!-- Requested Item Section -->
                <div
                    style="display: flex; gap: 20px; margin-bottom: 20px; padding: 15px; background: #f5f5f5; border-radius: 8px;">
                    <img src="" alt="" id="requestedItemImage"
                        style="width: 100px; height: 100px; object-fit: cover; border-radius: 4px;">
                    <div>
                        <h6 id="requestedItemTitle" style="margin: 0 0 10px 0; font-size: 1.1rem;"></h6>
                        <p id="requestedItemDescription" style="margin: 0; color: #666;"></p>
                    </div>
                </div>

                <!-- Your Items to Offer Section -->
                <div class="row" style="margin-bottom: 20px;">
                    <div class="col s12">
                        <h5 style="font-size: 1.2rem; margin-bottom: 15px;">Your Items to Offer</h5>
                        <div class="items-to-offer" style="max-height: 300px; overflow-y: auto;">
                            <!-- Populated dynamically with your available items -->
                        </div>
                    </div>
                </div>

                <!-- Message Section -->
                <div class="row" style="margin-bottom: 20px;">
                    <div class="col s12">
                        <div class="input-field">
                            <textarea name="message" id="message" class="materialize-textarea"
                                style="min-height: 100px;"></textarea>
                            <label for="message">Message to the owner (optional)</label>
                        </div>
                    </div>
                </div>

                <!-- Footer Buttons -->
                <div class="modal-footer" style="display: flex; justify-content: flex-end; gap: 10px; padding: 0;">
                    <button type="button" class="btn waves-effect waves-light grey"
                        onclick="closeTradeModal()">Cancel</button>
                    <button type="submit" class="btn waves-effect waves-light">Propose Trade</button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .item-card {
        transition: all 0.3s ease;
        border: 2px solid transparent;
        border-radius: 8px;
        padding: 10px;
        margin-bottom: 10px;
    }

    .item-card.selected {
        background-color: #e3f2fd;
        border-color: #2196f3;
    }

    .item-card label {
        display: flex;
        gap: 1rem;
        align-items: center;
        cursor: pointer;
        margin: 0;
        padding: 5px;
        border-radius: 4px;
    }

    .item-card label:hover {
        background-color: #f5f5f5;
    }

    .item-card.selected label {
        background-color: #e3f2fd;
    }

    .item-card img {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 4px;
    }

    .item-card .item-info {
        flex-grow: 1;
    }

    .item-card h6 {
        margin: 0 0 0.25rem 0;
        color: #333;
    }

    .item-card p {
        margin: 0;
        color: #666;
        font-size: 0.9rem;
    }

    #tradeProposalModal {
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.25);
        max-width: 900px;
        min-height: 500px;
        width: 95vw;
    }
</style>

<script>
    function closeTradeModal() {
        const modal = document.getElementById('tradeProposalModal');
        const overlay = document.getElementById('tradeProposalOverlay');
        modal.style.display = 'none';
        overlay.style.display = 'none';
        document.body.style.overflow = '';
    }

    // Show overlay when opening modal
    function showTradeModal() {
        const modal = document.getElementById('tradeProposalModal');
        const overlay = document.getElementById('tradeProposalOverlay');
        modal.style.display = 'block';
        overlay.style.display = 'block';
        document.body.style.overflow = 'hidden';
    }

    // Handle form submission
    document.getElementById('tradeProposalForm').addEventListener('submit', function (e) {
        e.preventDefault();

        // Only allow valid MongoDB ObjectIds
        const objectIdPattern = /^[a-fA-F0-9]{24}$/;
        const offeredItems = Array.from(document.querySelectorAll('input[name="offeredItems"]:checked'))
            .map(cb => cb.value)
            .filter(id => id && objectIdPattern.test(id));
        const requestedItem = document.getElementById('requestedItemId').value;

        // Debug logs
        console.log('requestedItem:', requestedItem);
        console.log('offeredItems:', offeredItems);

        if (offeredItems.length === 0) {
            M.toast({ html: 'Please select at least one valid item to offer' });
            return;
        }

        if (!requestedItem || !objectIdPattern.test(requestedItem)) {
            M.toast({ html: 'Invalid requested item' });
            return;
        }

        // Add offered items to form data as separate fields
        const formData = new FormData(this);
        formData.delete('offeredItems');
        offeredItems.forEach(id => formData.append('offeredItems', id));

        // Submit form
        fetch('/trades', {
            method: 'POST',
            body: formData,
            headers: {
                'Accept': 'application/json'
            }
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        try {
                            // Try to parse as JSON
                            const data = JSON.parse(text);
                            throw new Error(data.message || 'Error sending trade proposal');
                        } catch (e) {
                            // If not JSON, throw the text as error
                            throw new Error(text || 'Error sending trade proposal');
                        }
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    M.toast({ html: 'Trade proposal sent successfully' });
                    closeTradeModal();
                    window.location.href = '/trades';
                } else {
                    throw new Error(data.message || 'Error sending trade proposal');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                M.toast({ html: error.message || 'Error sending trade proposal' });
            });
    });

    // Function to handle item selection
    function handleItemSelection(checkbox) {
        const itemCard = checkbox.closest('.item-card');
        if (checkbox.checked) {
            itemCard.classList.add('selected');
        } else {
            itemCard.classList.remove('selected');
        }
    }

    // Update the items container HTML generation
    function updateItemsContainer(items) {
        const itemsContainer = document.querySelector('.items-to-offer');
        if (items.length === 0) {
            itemsContainer.innerHTML = '<p class="center-align">You have no available items to offer.</p>';
            return;
        }
        itemsContainer.innerHTML = items.map(item => `
            <div class="item-card">
                <label>
                    <input type="checkbox" name="offeredItems" value="${item._id}" class="filled-in" onchange="handleItemSelection(this)">
                    <img src="/uploads/items/${item.images[0]}" alt="${item.title}">
                    <div class="item-info">
                        <h6>${item.title}</h6>
                        <p>${item.description.substring(0, 100)}...</p>
                    </div>
                </label>
            </div>
        `).join('');
    }
</script>